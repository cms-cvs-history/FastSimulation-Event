#include "FastSimulation/Event/interface/FBaseSimEvent.h"
#include "FastSimulation/Event/interface/FSimVertex.h"

inline const FSimVertex& FSimTrack::vertex() const{ return mom_->vertex(vertIndex()); }

inline const FSimVertex& FSimTrack::endVertex() const { return mom_->vertex(endv_); }

inline const FSimTrack& FSimTrack::mother() const{ return vertex().parent(); }

inline const FSimTrack& FSimTrack::daughter(int i) const { 
  return abs(type()) != 11 ? endVertex().daughter(i) : mom_->track(daugh_[i]); 
}

inline const int FSimTrack::layerNum(int i) const { 
   return layernums_[i]; 
}

inline const double FSimTrack::layerRadL(int i) const { 
   return layerradls_[i]; 
}

inline const double FSimTrack::layerRpos(int i) const { 
   return layerRposs_[i]; 
}

inline const double FSimTrack::layerZpos(int i) const { 
   return layerZposs_[i]; 
}

inline int FSimTrack::nDaughters() const { 
  return abs(type()) != 11 ? endVertex().nDaughters() : daugh_.size(); 
}

inline int FSimTrack::nLayers() const { 
  return layernums_.size(); 
}

inline const std::vector<int>& FSimTrack::daughters() const { 
  return abs(type()) != 11 ? endVertex().daughters() : daugh_; 
}

inline const std::vector<int>& FSimTrack::layerNums() const { 
  return layernums_; 
}

inline const std::vector<double>& FSimTrack::layerRadLs() const { 
  return layerradls_; 
}

inline bool FSimTrack::noEndVertex() const { 
  return 
    // The particle either has no end vertex index
    endv_ == -1 || 
    // or it's an electron that has just brem'ed, but continues its way
    ( abs(type())==11 && 
      endVertex().nDaughters()>0 && 
      endVertex().daughter(endVertex().nDaughters()-1).type()==22); 
} 

inline bool FSimTrack::noMother() const { return noVertex() || vertex().noParent(); }

inline bool FSimTrack::noDaughter() const { return noEndVertex() || !nDaughters(); }

inline const HepMC::GenParticle* FSimTrack::genParticle() const { 
  return mom_->embdGenpart(genpartIndex()); 
}
